generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  fullName           String
  avatarUrl          String?
  avatarPublicId     String?
  passwordHash       String
  role               Role                 @default(USER)
  emailVerified      Boolean              @default(false)
  ownerProfile       FacilityOwner?
  ownerProfileId     Int?
  bookings           Booking[]
  reviews            Review[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Session            Session[]
  Account            Account[]
  PasswordResetToken PasswordResetToken[]
}

model FacilityOwner {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  phone        String?
  businessName String?
  address      String?
  venues       Venue[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Venue {
  id          Int           @id @default(autoincrement())
  owner       FacilityOwner @relation(fields: [ownerId], references: [id])
  ownerId     Int
  name        String
  slug        String        @unique
  description String?
  address     String
  city        String
  state       String?
  country     String?       @default("India")
  latitude    Float?
  longitude   Float?
  amenities   String[]      @default([])
  photos      String[]      @default([])
  approved    Boolean       @default(false)
  rating      Float?
  courts      Court[]
  reviews     Review[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([city])
  @@index([approved])
}

model Court {
  id           Int                   @id @default(autoincrement())
  venue        Venue                 @relation(fields: [venueId], references: [id])
  venueId      Int
  name         String
  sport        String
  image        String
  pricePerHour Int
  currency     String                @default("INR")
  openTime     Int
  closeTime    Int
  status       CourtStatus           @default(ACTIVE)
  bookings     Booking[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  ratingAgg    CourtRatingAggregate?
  reviews      Review[]
  CourtEvent   CourtEvent[]

  @@index([sport])
  @@index([venueId])
}

model Booking {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int
  court          Court         @relation(fields: [courtId], references: [id])
  courtId        Int
  startTime      DateTime
  endTime        DateTime
  bookedForDate  DateTime
  status         BookingStatus @default(PENDING)
  payment        Payment?
  paymentId      Int?          @unique
  idempotencyKey String?       @unique
  notes          String?
  createdAt      DateTime      @default(now())

  @@unique([courtId, startTime])
  @@index([userId])
  @@index([courtId])
  @@index([status])
}

model Payment {
  id                    Int           @id @default(autoincrement())
  booking               Booking?      @relation(fields: [bookingId], references: [id])
  bookingId             Int?          @unique
  gateway               String        @default("stripe")
  stripePaymentIntentId String?       @unique
  stripeChargeId        String?
  amount                Int
  currency              String        @default("INR")
  status                PaymentStatus @default(PENDING)
  receiptUrl            String?
  paymentMethod         String?
  createdAt             DateTime      @default(now())

  @@index([stripePaymentIntentId])
  @@index([status])
}

model Review {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  court   Court @relation(fields: [courtId], references: [id], onDelete: Cascade)
  courtId Int

  // Optional: denormalized reference for venue-level reporting
  venue   Venue? @relation(fields: [venueId], references: [id], onDelete: SetNull)
  venueId Int?

  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@index([courtId])
  @@index([userId])
  @@index([venueId])
}

model EmailOtp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  tokenHash String
  expiresAt DateTime
  attempts  Int      @default(0)
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  tokenHash String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([tokenHash])
  @@index([userId])
  @@index([expiresAt])
}

// Optional NextAuth-compatible Session / Account models
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expires      DateTime

  @@index([userId])
  @@index([expires])
}

model Account {
  id                Int     @id @default(autoincrement())
  user              User    @relation(fields: [userId], references: [id])
  userId            Int
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@index([identifier])
}

// For featured courts caching

model CourtEvent {
  id             Int       @id @default(autoincrement())
  court          Court     @relation(fields: [courtId], references: [id], onDelete: Cascade)
  courtId        Int
  kind           EventKind // VIEW or BOOKING
  source         String?
  city           String?
  idempotencyKey String?
  createdAt      DateTime  @default(now())

  @@index([courtId, kind, createdAt])
  @@index([city, kind, createdAt])
}

model CourtRatingAggregate {
  court     Court    @relation(fields: [courtId], references: [id], onDelete: Cascade)
  courtId   Int      @id
  stars1    Int      @default(0)
  stars2    Int      @default(0)
  stars3    Int      @default(0)
  stars4    Int      @default(0)
  stars5    Int      @default(0)
  avg       Float    @default(0)
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
}

model FeaturedSnapshot {
  id         Int       @id @default(autoincrement())
  city       String?
  items      Json
  computedAt DateTime  @default(now())
  validUntil DateTime?

  @@index([city, computedAt])
}

// Enums
enum Role {
  USER
  OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum CourtStatus {
  ACTIVE
  INACTIVE
}

enum EventKind {
  VIEW
  BOOKING
}
